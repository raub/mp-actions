'use strict';

/* global use */

const ns = use('lib/rau-ns');

module.exports = {
	
	Eye    : use('eye')    ,
	Engine : use('engine') ,
	Neuron : ns.Neuron,
	
	pos   : 'float2', // позиция
	rgb   : 'float3', // цвет
	size  : 'float' , // relative size
	energy: 'float' , // energy storage
	
	eyes: 'int' , // number of eyes
	
	clockwise: 'Neuron',
	forward  : 'Neuron',
	right    : 'Neuron',
	
	add(count, pos, scale) {
		pos = pos || [0, 0];
		scale = scale || 1;
		
		this(count, { 'float2 offs': pos, 'float scale': scale }, `
			
			Self.new {
				.pos    = scale * ri2xy(1, i) + offs;
				.rgb    = {0.3f, 0.3f, 0.3f};
				.size   = 16.0f;
				.energy = 0.1f;
				.eyes   = 10;
				
				for (int j = 0; j < .eyes; j++) {
					Eye.new {
						.host  = ..;
						.value = 0.0;
						.idx   = j;
					}
				}
				
				Neuron.new {
					..clockwise = .;
					.value = 0.0;
				}
				Neuron.new {
					..forward = .;
					.value = 0.0;
				}
				Neuron.new {
					..right = .;
					.value = 0.0;
				}
				
			}
			
		`);
		
	},
	
	
	go() {
		const app = this.App.get();
		this.points = new app.tuti.Points({
			data: this,
			frag: `
				varying   vec3  varColor;
				varying   vec2  varVel;
				varying   vec2  varTcoord;
				varying   float varSize;
				
				void main() {
					vec2 dir = 0.5*(gl_PointCoord.xy - vec2(0.5, 0.5));
					float dist = max(0.0, 0.245 - length(dir));
					float dist2 = abs(0.17-dist);
					dist = pow(dist, 20.0)*200000000000000000.0;
					dist2 = pow(dist2, 2.0)*200.0;
					float veldot = min(1.0, max(0.0, dot(normalize(varVel), normalize(dir))));//min(1.0, length(varVel))*
					float dotinv = min(1.0, max(0.0, pow(veldot-0.98, 1.4)));
					veldot = min(1.0, pow(veldot, 100.0));
					
					veldot = max(0.0, veldot - 200000.0*dotinv);
					dist2 = max(0.0, min(0.3, 0.3-dist2));
					gl_FragColor = vec4(varColor, (1.0+0.1*length(varVel)*veldot)*min(1.0, dist)-max(0.0, dist2));
				}
			`,
		});
	},
	
	
	tick() {
		
		this(`
			
			.energy = __saturatef(.energy);
			.rgb = { 0.3f + 0.7f * .energy, 0.3f - 0.3f * .energy, 0.3f - 0.3f * .energy };
			
		`);
		
	},
	
	
};
